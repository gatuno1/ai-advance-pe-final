#!/usr/bin/env python

import re
import json

"""
Este m√≥dulo contiene funciones para la obtenci√≥n de los datos personales del paciente y los s√≠ntomas relacionados con su enfermedad.

Funciones disponibles:
- obtener_datos_paciente: Solicita al cliente los datos personales.
- registrar_sintomas: Solicita al paciente que ingrese sus s√≠ntomas.
- realizar_preguntas_relevantes: Genera preguntas relevantes bas√°ndose en los s√≠ntomas y caracter√≠sticas del paciente utilizando GPT-4o-mini.
"""



def obtener_datos_paciente():
    datos = {}
    intentos_maximos = 3

    # Validaci√≥n con intentos limitados
    def solicitar_dato(pregunta, validacion_func, campo):
        intentos = 0
        ultima_respuesta = ""

        while intentos < intentos_maximos:
            respuesta = input(pregunta)
            ultima_respuesta = respuesta
            if validacion_func(respuesta):
                datos[campo] = respuesta if campo != "edad" else int(respuesta)
                return True
            print(f"‚ö†Ô∏è {campo.capitalize()} inv√°lido. Int√©ntalo nuevamente.")
            intentos += 1

        # Si supera los intentos permitidos
        datos[campo] = ultima_respuesta
        return False

    print("\nüîπ **Registro de Datos Demogr√°ficos**")

    if not solicitar_dato("Ingresa tu nombre: ", validar_nombre, "nombre"):
        print("‚õî No es posible continuar sin un nombre v√°lido.")
        guardar_datos(datos, False)
        return

    if not solicitar_dato("Ingresa tu RUT (Ejemplo: 12345678-9): ", validar_rut, "rut"):
        print("‚õî No es posible continuar sin un RUT v√°lido.")
        guardar_datos(datos, False)
        return

    if not solicitar_dato("Ingresa tu sexo (M: Masculino, F: Femenino, N: No informa): ", validar_sexo, "sexo"):
        print("‚õî No es posible continuar sin un sexo v√°lido.")
        guardar_datos(datos, False)
        return

    if not solicitar_dato("Ingresa tu edad (0-120 a√±os): ", validar_edad, "edad"):
        print("‚õî No es posible continuar sin una edad v√°lida.")
        guardar_datos(datos, False)
        return
    
    if not solicitar_dato("Ingresa tu peso (0-200 Kg): ", validar_peso, "peso"):
        print("‚õî No es posible continuar sin un peso valido")
        guardar_datos(datos, False)
        return

    # Si todos los datos son correctos
    guardar_datos(datos, True)
    print("‚úÖ Datos guardados exitosamente en 'datos_demograficos.json'")

    return datos





def registrar_sintomas():
    """Solicita al paciente que ingrese sus s√≠ntomas."""
    print("\nIngrese los s√≠ntomas que est√° presentando (separados por coma):")
    sintomas = input("S√≠ntomas: ")

    return [s.strip() for s in sintomas.split(",")]


def realizar_preguntas_relevantes(datos_basicos, sintomas, clientIA):
    """Genera preguntas relevantes bas√°ndose en los s√≠ntomas y caracter√≠sticas del paciente utilizando GPT-4o-mini."""
    print("\nEl modelo est√° analizando los s√≠ntomas y generando preguntas adicionales...")

    # Ajustar el prompt para incluir sexo, peso y edad del paciente
    prompt = (
        f"Paciente de {datos_basicos['edad']} a√±os, sexo {datos_basicos['sexo']} y peso {datos_basicos['peso']} kg.\n"
        f"S√≠ntomas reportados: {', '.join(sintomas)}\n"
        "Con base en estos s√≠ntomas y caracter√≠sticas del paciente, genere hasta 5 preguntas relevantes "
        "para obtener m√°s detalles que complementen el diagn√≥stico. Las preguntas deben ser claras y espec√≠ficas."
    )

    try:
        messages = [
            {
                "role": "system",
                "content": "Eres un asistente m√©dico que ayuda a recopilar informaci√≥n relevante de pacientes.",
            },
            {"role": "user", "content": prompt},
        ]

        response = clientIA.chat.completions.create(
            model="gpt-4o-mini",  # Ajustado al modelo compatible
            messages=messages,
            temperature=0,
            max_tokens=1000,
            top_p=0.95,
            frequency_penalty=0,
            presence_penalty=0,
        )
        
        preguntas = response.choices[0].message.content.split("\n")
        respuestas = []
        for pregunta in preguntas:
            if pregunta.strip():
                respuesta = input(f"{pregunta.strip()} ")
                respuestas.append({
                    "pregunta": pregunta.strip(),
                    "respuesta": respuesta
                })

        # Generar un JSON con las preguntas y respuestas en el formato solicitado
        preguntas_respuestas = respuestas

        # Guardar las preguntas y respuestas en un archivo JSON con codificaci√≥n UTF-8
        with open('preguntas_respuestas.json', 'w', encoding='utf-8') as f:
            json.dump(preguntas_respuestas, f, indent=4, ensure_ascii=False)
        print("1")

        return respuestas
    except Exception as e:
        print(f"Error al generar preguntas: {str(e)}")
        return []




# Funciones de validaci√≥n
def validar_nombre(nombre):
    return bool(re.match(r"^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√± ]+$", nombre))

def validar_rut(rut):
    return bool(re.match(r"^[0-9]+-[0-9Kk]$", rut))

def validar_sexo(sexo):
    return sexo.upper() in ["M", "F", "N"]

def validar_edad(edad):
    return edad.isdigit() and 0 <= int(edad) <= 120

def validar_peso(peso):
    return peso.isdigit() and 0 <= int(peso) <= 200

def guardar_datos(datos, almacenado_correctamente):
    datos["almacenado_correctamente"] = almacenado_correctamente
    with open("datos_demograficos.json", "w", encoding="utf-8") as archivo:
        json.dump(datos, archivo, ensure_ascii=False, indent=4)